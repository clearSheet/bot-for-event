from aiogram import Router, types
from aiogram.types import Message, ReplyKeyboardRemove, InlineKeyboardButton, CallbackQuery
from aiogram.dispatcher.fsm.state import StatesGroup, State
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.dispatcher.filters import Text


from keyboards import true_or_edit_keyboard, main_working
from keyboards.inlines import back_to_main_menu


router = Router()

builder = InlineKeyboardBuilder()
builder.row(
    InlineKeyboardButton(text="Test IT", callback_data="news_test_it"),
    InlineKeyboardButton(text="TeamStorm", callback_data="news_team_storm")
)

builder.row(
    InlineKeyboardButton(text="–û–±–∞ –ø—Ä–æ–¥—É–∫—Ç–∞", callback_data="news_oba"),
    InlineKeyboardButton(text="–ù–µ —Ö–æ—á—É –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="news_no")
)


class GetNews(StatesGroup):
    get_email = State()
    confirm_email = State()

    get_category = State()
    confirm_category = State()


@router.message(text='üì≤ –ù–æ–≤–æ—Å—Ç–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º')
async def show_rules_of_event(message: Message, state: FSMContext):
    await message.answer('–ù–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∞–∫–∏–º –ø—Ä–æ–¥—É–∫—Ç–∞–º —Ç–µ–±–µ –±—ã–ª–∏ –±—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã?',
                         reply_markup=builder.as_markup())


@router.callback_query(Text(text_startswith="news_"))
async def get_category(callback: CallbackQuery, state: FSMContext):
    answer = callback.data
    if answer == 'news_test_it':
        await state.update_data(category='news_test_it')

        await state.set_state(GetNews.get_email)
        await callback.message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–∏–º –ø—Ä–æ–¥—É–∫—Ç–∞–º!\n'
                                      '–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π email, —á—Ç–æ –º—ã –º–æ–≥–ª–∏ –ø—Ä–∏—Å–ª–∞—Ç—å '
                                      '—Ç–µ–±–µ –ø–æ–¥–±–æ—Ä–∫—É –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Å—Ç–∞—Ç–µ–π.\n'
                                      'P.S. –ò –Ω–∏–∫–∞–∫–æ–≥–æ —Å–ø–∞–º–∞!',
                                      reply_markup=back_to_main_menu.keyboard())
    elif answer == 'news_team_storm':
        await state.update_data(category='news_team_storm')

        await state.set_state(GetNews.get_email)
        await callback.message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–∏–º –ø—Ä–æ–¥—É–∫—Ç–∞–º!\n'
                                      '–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π email, —á—Ç–æ –º—ã –º–æ–≥–ª–∏ –ø—Ä–∏—Å–ª–∞—Ç—å '
                                      '—Ç–µ–±–µ –ø–æ–¥–±–æ—Ä–∫—É –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Å—Ç–∞—Ç–µ–π.\n'
                                      'P.S. –ò –Ω–∏–∫–∞–∫–æ–≥–æ —Å–ø–∞–º–∞!',
                                      reply_markup=back_to_main_menu.keyboard())
    elif answer == 'news_oba':
        await state.update_data(category='news_team_storm and news_test_it')

        await state.set_state(GetNews.get_email)
        await callback.message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–∏–º –ø—Ä–æ–¥—É–∫—Ç–∞–º!\n'
                                      '–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π email, —á—Ç–æ –º—ã –º–æ–≥–ª–∏ –ø—Ä–∏—Å–ª–∞—Ç—å '
                                      '—Ç–µ–±–µ –ø–æ–¥–±–æ—Ä–∫—É –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Å—Ç–∞—Ç–µ–π.\n'
                                      'P.S. –ò –Ω–∏–∫–∞–∫–æ–≥–æ —Å–ø–∞–º–∞!',
                                      reply_markup=back_to_main_menu.keyboard())
    else:
        await callback.message.answer('–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –Ω–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è!',
                                         reply_markup=main_working.keyboard())

        await state.clear()


@router.message(GetNews.get_email)
async def get_email(message: Message, state: FSMContext):
    if '@' in message.text:
        await message.answer(
            f'–¢—ã —É–∫–∞–∑–∞–ª\n\n'
            f'{message.text}\n\n'
            f'–í –∫–∞—á–µ—Å—Ç–≤–µ Email-–¥—Ä–µ—Å–∞, –≤–µ—Ä–Ω–æ',
            reply_markup=true_or_edit_keyboard.keyboard()
        )

        await state.update_data(email=message.text)
        await state.set_state(GetNews.confirm_email)
    else:
        await message.answer(
            text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å Email –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –±—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–∞—à–∏ –Ω–æ–≤–æ—Å—Ç–∏',
            reply_markup=back_to_main_menu.keyboard()
        )
        await state.set_state(GetNews.get_email)


@router.message(GetNews.confirm_email)
async def confirm_email(message: Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω–æ ‚úÖ':
        from bot import db

        data = await state.get_data()
        category = data['category']
        email = data['email']

        await db.add_email_and_category(
            user_id=message.from_user.id,
            email=email,
            category=category
        )
        await state.clear()
        await message.answer('–û—Ç–ª–∏—á–Ω–æ, –º—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ üî•', reply_markup=main_working.keyboard())

    elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å ‚úçÔ∏è':
        await message.answer('–û—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Email, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –º—ã –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ—Å—Ç–∏!')
        await state.set_state(GetNews.get_email)
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞',
                             reply_markup=true_or_edit_keyboard.keyboard())
        await state.set_state(GetNews.confirm_email)

    from bot import db

    user_info1 = await db.get_one_user_info(message.from_user.id)
    user_info1 = user_info1[0]
    review1 = user_info1[7]
    user_lvl1 = user_info1[9]
    email1 = user_info1[10]
    post_path1 = user_info1[12]
    friends_count1 = user_info1[14]
    in_test_it1 = user_info1[15]
    in_teamstorm1 = user_info1[16]
    quiz_status1 = user_info1[17]

    if in_test_it1 == 1 and friends_count1 >= 2 and user_lvl1 == 0:
        await db.lvl_up_user(message.from_user.id)
        await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è!')

    if in_test_it1 == 1 and in_teamstorm1 == 1 and friends_count1 >= 4 and user_lvl1 == 1:
        await db.lvl_up_user(message.from_user.id)
        await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è!')

    if in_test_it1 == 1 and in_teamstorm1 == 1 and friends_count1 >= 6 and user_lvl1 == 2 and quiz_status1 == 1 and post_path1 and email1:
        await db.lvl_up_user(message.from_user.id)
        await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è!')

    if in_test_it1 == 1 and in_teamstorm1 == 1 and friends_count1 >= 8 and user_lvl1 == 3 and quiz_status1 == 1 and post_path1 and review1:
        await db.lvl_up_user(message.from_user.id)
        await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è!')


