import asyncio

from aiogram import Router
from aiogram.types import Message, ReplyKeyboardRemove, UserProfilePhotos
from aiogram.types import FSInputFile
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.dispatcher.fsm.state import StatesGroup, State


from keyboards import true_or_edit_keyboard, share_phone_number, main_working

from bot import db

from data import msg
from functions import generate_card

router = Router()


class RegisterNewUser(StatesGroup):
    start = State()
    # –†–∞–±–æ—Ç–∞ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    get_user_name = State()
    edit_user_name = State()
    # –†–∞–±–æ—Ç–∞ —Å –ª–æ–≥–∏–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    get_user_login = State()
    edit_user_login = State()
    # –†–∞–±–æ—Ç–∞ —Å –¥–æ–ª–∂–Ω–æ—Å—Ç—å—é –∏ –∫–æ–º–ø–∞–Ω–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    get_user_position_and_company = State()
    confirm_user_position_and_company = State()
    edit_user_position_and_company = State()
    # –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    get_user_status = State()
    confirm_user_status = State()
    # –†–∞–±–æ—Ç–∞—Å —Å —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    get_user_photo = State()
    confirm_user_photo = State()
    # –†–∞–±–æ—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    get_user_phone = State()


# __ –†–∞–±–æ—Ç–∞ —Å QR –∫–æ–¥–æ–º
from aiogram.dispatcher.filters import CommandObject


@router.message(commands=['start'])
async def test(message: Message, command: CommandObject, state: FSMContext):
    # qr_code = command.args
    await state.clear()

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª qr
    if command.args:
        qr_code = str(command.args)
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π QR
        if await db.chek_qr_id_db(qr_code=qr_code):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç qr –∏ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            if await db.user_in_the_database(message.from_user.id):
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π qr, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if await db.user_tied_qr(qr_code):
                    # or await db.user_tied_qr(qr_code)
                    user = await db.get_user_by_qr(qr_code)
                    user = str(user[0]).replace('(', '').replace(')','').replace(',','').replace("'", "")

                    user_1 = message.chat.id

                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –¥—Ä—É–∑—å—è—Ö
                    if await db.check_friends(user_id_1=user_1, user_id_2=user):
                        await message.answer('–¢—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥—Ä—É–∑—å—è')
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –≤ –¥—Ä—É–∑—å—è—Ö
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –î–†–£–ó–¨–Ø
                    else:
                        await db.add_friends(user_id_1=user_1, user_id_2=user)
                        from bot import bot

                        photo1 = FSInputFile(f'data/user_profiles/{user}_profile.jpg')
                        photo2 = FSInputFile(f'data/user_profiles/{message.chat.id}_profile.jpg')

                        data1 = await db.get_one_user_info(str(user))
                        data2 = await db.get_one_user_info(str(message.chat.id))

                        login1 = str(data1[0][2])
                        login2 = str(data2[0][2])

                        await message.reply_photo(caption=f'–ù–æ–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ! \n\n @{login1}',
                                                  photo=photo1)

                        await bot.send_photo(
                            chat_id=user,
                            photo=photo2,
                            caption=f'–ù–æ–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ! \n\n @{login2}'
                        )

                        user_info1 = await db.get_one_user_info(message.from_user.id)
                        user_info1 = user_info1[0]
                        review1 = user_info1[7]
                        user_lvl1 = user_info1[9]
                        email1 = user_info1[10]
                        post_path1 = user_info1[12]
                        friends_count1 = user_info1[14]
                        in_test_it1 = user_info1[15]
                        in_teamstorm1 = user_info1[16]
                        quiz_status1 = user_info1[17]

                        user_info2 = await db.get_one_user_info(user)
                        user_info2 = user_info2[0]
                        review2 = user_info2[7]
                        user_lvl2 = user_info2[9]
                        email2 = user_info2[10]
                        post_path2 = user_info2[12]
                        friends_count2 = user_info2[14]
                        in_test_it2 = user_info2[15]
                        in_teamstorm2 = user_info2[16]
                        quiz_status2 = user_info2[17]

                        if in_test_it1 == 1 and friends_count1 >= 2 and user_lvl1 == 0:
                            await db.lvl_up_user(message.from_user.id)
                            await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è!')

                        if in_test_it1 == 1 and in_teamstorm1 == 1 and friends_count1 >= 4 and user_lvl1 == 1:
                            await db.lvl_up_user(message.from_user.id)
                            await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è!')

                        if in_test_it1 == 1 and in_teamstorm1 == 1 and friends_count1 >= 6 and user_lvl1 == 2 and quiz_status1 == 1 and post_path1 and email1:
                            await db.lvl_up_user(message.from_user.id)
                            await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è!')

                        if in_test_it1 == 1 and in_teamstorm1 == 1 and friends_count1 >= 8 and user_lvl1 == 3   and quiz_status1 == 1 and post_path1 and review1:
                            await db.lvl_up_user(message.from_user.id)
                            await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è!')



                        if in_test_it2 == 1 and friends_count2 >= 2 and user_lvl2 == 0:
                            await db.lvl_up_user(message.from_user.id)
                            await bot.send_message(chat_id=user, text='–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è!')

                        if in_test_it2 == 1 and in_teamstorm2 == 1 and friends_count2 >= 4 and user_lvl2 == 1:
                            await db.lvl_up_user(message.from_user.id)
                            await bot.send_message(chat_id=user, text='–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è!')

                        if in_test_it2 == 1 and in_teamstorm2 == 1 and friends_count2 >= 6 and user_lvl2 == 2 and quiz_status2 == 1 and post_path2 and email2:
                            await db.lvl_up_user(message.from_user.id)
                            await bot.send_message(chat_id=user, text='–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è!')

                        if in_test_it1 == 1 and in_teamstorm2 == 1 and friends_count2 >= 8 and user_lvl2 == 3   and quiz_status2 == 1 and post_path2 and review2:
                            await db.lvl_up_user(message.from_user.id)
                            await bot.send_message(chat_id=user, text='–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è!')





                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç qr, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                else:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–∞–ª–∏–Ω—ã–π QR
                    if await db.chek_qr_id_db(qr_code):
                        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º QR –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n'
                                             '–ü–æ–º–æ–≥–∏ –µ–º—É –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –±–æ—Ç–µ!')
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π qr
                    else:
                        await message.answer('–¢–∞–∫–æ–≥–æ QR-–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç qr –∏ –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            # –ü—Ä–æ—Ü–µ—Å—Å –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
            else:
                # QR –∫–æ–¥ –≤–∞–ª–∏–¥–Ω—ã–π
                if await db.chek_qr_id_db(qr_code):
                    await state.update_data(qr_code=qr_code)

                    # await message.answer(msg.hi_message_one, parse_mode="MarkdownV2")
                    photo = FSInputFile(f'data/cover.jpg')

                    await message.answer_photo(
                        photo=photo,
                        caption=msg.hi_message_one,
                        parse_mode="MarkdownV2"
                    )

                    await message.answer(msg.hi_message_second, parse_mode="MarkdownV2")

                    if message.from_user.first_name and message.from_user.last_name:
                        await message.answer(f'–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n'
                                             f'–¢–≤–æ–µ –∏–º—è {message.from_user.first_name + message.from_user.last_name}, –≤–µ—Ä–Ω–æ? üëá',
                                             reply_markup=true_or_edit_keyboard.keyboard())
                        await state.set_state(RegisterNewUser.get_user_name)
                    elif message.from_user.first_name:

                        await message.answer(f'–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n'
                                             f'–¢–≤–æ–µ –∏–º—è {message.from_user.first_name}, –≤–µ—Ä–Ω–æ? üëá',
                                             reply_markup=true_or_edit_keyboard.keyboard())
                        await state.set_state(RegisterNewUser.get_user_name)
                    else:
                        await message.answer('–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!'
                                             '–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?üëá')
                        await state.set_state(RegisterNewUser.edit_user_name)
                # QR –∫–æ–¥ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π
                else:
                    await message.answer('–¢—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –Ω–µ –Ω–∞—Å—Ç–æ—è—â–∏–π QR-–∫–æ–¥!')
        #  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π QR
        else:
            await message.answer('–ï—Å–ª–∏ —Ç—ã –¥–æ—à–µ–ª –¥–æ —ç—Ç–æ–≥–æ —à–∞–≥–∞, —Ç—ã - –Ω–∞—Å—Ç–æ—è—â–∏–π —Ö–∞–∫–µ—Ä\n'
                                 '–ù–æ –Ω–µ –Ω–∞–¥–æ –ø—Ä–æ–±–æ–≤–∞—Ç—å –º–µ–Ω—è –≤–∑–ª–∞–º—ã–≤–∞—Ç—å, —è —É–º–Ω—ã–π!')
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç QR
    else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç qr –∏ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            if await db.user_in_the_database(message.from_user.id):
                await message.answer('–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã', reply_markup=main_working.keyboard())
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç qr –∏ –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            else:
                await message.answer('–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å'
                                     '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π QR-–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ '
                                     '–Ω–∞ —Å—Ç–µ–Ω–¥–µ!')


@router.message(RegisterNewUser.get_user_name)
async def get_user_name(message: Message, state: FSMContext):
    await state.update_data(user_login=message.from_user.username)

    if message.text == '–í–µ—Ä–Ω–æ ‚úÖ':
        try:
            name = await state.get_data()
            name = name['user_name']
            await state.update_data(user_name=name)
            await state.set_state(RegisterNewUser.get_user_position_and_company)
            await message.answer('–û—Ç–ª–∏—á–Ω–æ! –ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Ç–≤–æ–µ –∏–º—è ‚úÖ\n\n'
                                 '–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ. –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–≤–æ—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏ –∫–æ–º–ø–∞–Ω–∏—è?\n\n'
                                 '–ù–∞–ø—Ä–∏–º–µ—Ä: Team Lead, Test IT', reply_markup=ReplyKeyboardRemove())
        except KeyError:
            if message.from_user.first_name and message.from_user.last_name:
                await state.update_data(user_name=message.from_user.first_name + " " + message.from_user.last_name)
                # await message.answer(f'–û—Ç–ª–∏—á–Ω–æ! –ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Ç–≤–æ–µ –∏–º—è ‚úÖ\n\n',
                                     # f'–¢–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–∞–∫–∫–∞—É–Ω—Ç @{message.from_user.username}, –≤–µ—Ä–Ω–æ?',
                                     # reply_markup=true_or_edit_keyboard.keyboard())
                # await state.set_state(RegisterNewUser.get_user_login)
                await state.set_state(RegisterNewUser.get_user_position_and_company)
                await message.answer('–û—Ç–ª–∏—á–Ω–æ! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã üî•\n'
                                     '–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ. –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–≤–æ—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏ –∫–æ–º–ø–∞–Ω–∏—è?\n\n'
                                     '–ù–∞–ø—Ä–∏–º–µ—Ä: Team Lead, Test IT\n\n', reply_markup=ReplyKeyboardRemove())

            else:
                await state.update_data(user_name=message.from_user.first_name)
                # await message.answer(f'–û—Ç–ª–∏—á–Ω–æ! –ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Ç–≤–æ–µ –∏–º—è ‚úÖ\n\n',
                                     # f'–¢–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–∞–∫–∫–∞—É–Ω—Ç @{message.from_user.username}, –≤–µ—Ä–Ω–æ?',
                                     # reply_markup=true_or_edit_keyboard.keyboard())
                # await state.set_state(RegisterNewUser.get_user_login)
                await state.set_state(RegisterNewUser.get_user_position_and_company)
                await message.answer('–û—Ç–ª–∏—á–Ω–æ! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã üî•\n'
                                     '–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ. –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–≤–æ—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏ –∫–æ–º–ø–∞–Ω–∏—è?\n\n'
                                     '–ù–∞–ø—Ä–∏–º–µ—Ä: Team Lead, Test IT\n\n', reply_markup=ReplyKeyboardRemove())
    elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å ‚úçÔ∏è':
        await message.answer('–í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è')
        await state.set_state(RegisterNewUser.edit_user_name)
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç –∫–Ω–æ–ø–∫–æ–π',
                             reply_markup=true_or_edit_keyboard.keyboard())
        await state.set_state(RegisterNewUser.get_user_name)


@router.message(RegisterNewUser.edit_user_name)
async def edit_user_name(message: Message, state: FSMContext):
    await state.update_data(user_name=message.text)
    await message.answer(f'–¢—ã —É–∫–∞–∑–∞–ª {message.text} –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏–º–µ–Ω–∏, –≤–µ—Ä–Ω–æ?',
                         reply_markup=true_or_edit_keyboard.keyboard())
    await state.set_state(RegisterNewUser.get_user_name)


@router.message(RegisterNewUser.get_user_login)
async def get_user_login(message: Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω–æ ‚úÖ':
        await state.update_data(user_login=message.from_user.username)
        await message.answer('–û—Ç–ª–∏—á–Ω–æ! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã üî•\n'
                             '–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ. –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–≤–æ—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏ –∫–æ–º–ø–∞–Ω–∏—è?\n\n'
                             '–ù–∞–ø—Ä–∏–º–µ—Ä: Team Lead, Test IT\n\n', reply_markup=ReplyKeyboardRemove())
        await state.set_state(RegisterNewUser.get_user_position_and_company)
    elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å ‚úçÔ∏è':
        await message.answer('–í–≤–µ–¥–∏ –∏–º—è —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –Ω–∞—á–∏–Ω–∞—è —Å @ üëá')
        await state.set_state(RegisterNewUser.edit_user_login)
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç –∫–Ω–æ–ø–∫–æ–π')
        await state.set_state(RegisterNewUser.edit_user_name)


@router.message(RegisterNewUser.edit_user_login)
async def edit_user_login(message: Message, state: FSMContext):
    await state.update_data(user_login=message.text)
    await message.answer(f'–¢–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–∞–∫–∫–∞—É–Ω—Ç {message.text}, –≤–µ—Ä–Ω–æ?')
    await state.set_state(RegisterNewUser.get_user_login)


@router.message(RegisterNewUser.get_user_position_and_company)
async def get_user_position_and_company(message: Message, state: FSMContext):
    await message.answer(f'–¢—ã —É–∫–∞–∑–∞–ª –æ —Å–µ–±–µ —Ç–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n\n{message.text}\n\n–í–µ—Ä–Ω–æ?',
                         reply_markup=true_or_edit_keyboard.keyboard())
    await state.set_state(RegisterNewUser.confirm_user_position_and_company)
    await state.update_data(user_position_and_company=message.text)


@router.message(RegisterNewUser.confirm_user_position_and_company)
async def confirm_user_position_and_company(message: Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω–æ ‚úÖ':
        await message.answer('–°—É–ø–µ—Ä! –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n\n'
                             '–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - –ø–æ—Å—Ç–∞–≤—å —Å—Ç–∞—Ç—É—Å(–Ω–µ –±–æ–ª–µ–µ 38 —Å–∏–º–≤–æ–ª–æ–≤) –¥–ª—è —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.\n'
                             '–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–í 14:00 –≤—ã—Å—Ç—É–ø–∞—é —Å –¥–æ–∫–ª–∞–¥–æ–º. –ë—É–¥—É —Ä–∞–¥ –ø–æ–æ–±—â–∞—Ç—å—Å—è!¬ª –∏–ª–∏ ¬´–ò—â—É SDET –≤ –∫–æ–º–∞–Ω–¥—É¬ª',
                             reply_markup=ReplyKeyboardRemove())
        await state.set_state(RegisterNewUser.get_user_status)
    elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å ‚úçÔ∏è':
        await message.answer('–í–≤–µ–¥–∏ —Å–≤–æ—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é üëá',
                             reply_markup=ReplyKeyboardRemove())
        await state.set_state(RegisterNewUser.get_user_position_and_company)
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞')
        await state.set_state(RegisterNewUser.confirm_user_position_and_company)


@router.message(RegisterNewUser.get_user_status)
async def get_user_status(message: Message, state: FSMContext):
    await state.update_data(user_status=message.text)
    if len(message.text) > 38:
        await message.answer('–í–≤–µ–¥–∏ —Å—Ç–∞—Ç—É—Å, –∫–æ—Ç–æ—Ä—ã–π –º–µ–Ω–µ–µ 38 —Å–∏–º–≤–æ–ª–æ–≤')
        await state.set_state(RegisterNewUser.get_user_status)
    else:
        await message.answer(f'–¢–≤–æ–π —Å—Ç–∞—Ç—É—Å:\n\n'
                             f'{message.text}\n\n'
                             f'–í–µ—Ä–Ω–æ?', reply_markup=true_or_edit_keyboard.keyboard())
        await state.set_state(RegisterNewUser.confirm_user_status)


@router.message(RegisterNewUser.confirm_user_status)
async def confirm_user_status(message: Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω–æ ‚úÖ':
        await message.answer('–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤!',
                             reply_markup=ReplyKeyboardRemove())

        #  –¢–≤–æ–µ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–æ—Ç —Ç–∞–∫, —Å–æ–≥–ª–∞—Å–µ–Ω?

        from bot import bot
        try:
            user_profile_photo: UserProfilePhotos = await bot.get_user_profile_photos(message.from_user.id)
            file = await bot.get_file(user_profile_photo.photos[0][-1].file_id)
            await bot.download_file(file.file_path, f'data/user_photos/{message.from_user.id}_photo.jpg')

            await state.update_data(photo_path=f'data/user_photos/{message.from_user.id}_photo.jpg')

            await asyncio.sleep(3)

            photo = FSInputFile(f'data/user_photos/{message.from_user.id}_photo.jpg')
            await message.reply_photo(caption='–ú—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–≤–æ–µ —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å.',
                                      photo=photo,
                                      reply_markup=true_or_edit_keyboard.keyboard())

            await state.set_state(RegisterNewUser.confirm_user_photo)
        except IndexError:
            await message.answer('–û—Ç–ø—Ä–∞–≤—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–¥–µ–ª–∞–π —Å–µ–ª—Ñ–∏ üì∑')
            await state.set_state(RegisterNewUser.get_user_photo)


    elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å ‚úçÔ∏è':
        await message.answer('–ü–æ—Å—Ç–∞–≤—å —Å—Ç–∞—Ç—É—Å –¥–ª—è —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.\n\n'
                             '–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–í 14:00 –≤—ã—Å—Ç—É–ø–∞—é —Å –¥–æ–∫–ª–∞–¥–æ–º. –ë—É–¥—É —Ä–∞–¥ –ø–æ–æ–±—â–∞—Ç—å—Å—è!¬ª –∏–ª–∏ ¬´–ò—â—É SDET –≤ –∫–æ–º–∞–Ω–¥—É¬ª',
                             reply_markup=ReplyKeyboardRemove())
        await state.set_state(RegisterNewUser.get_user_status)
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–∏—Ä–∏ –æ—Ç–≤–µ—Ç –∫–Ω–æ–ø–∫–æ–π')
        await state.set_state(RegisterNewUser.confirm_user_status)


@router.message(RegisterNewUser.get_user_photo)
async def get_user_photo(message: Message, state: FSMContext):

    try:
        from bot import bot

        file_id = message.photo[-1].file_id
        file = await bot.get_file(file_id)

        await bot.download_file(file.file_path, f'data/user_photos/{message.from_user.id}_photo.jpg')
        await state.set_state(RegisterNewUser.confirm_user_photo)
        await state.update_data(photo_path=f'data/user_photos/{message.from_user.id}_photo.jpg')

        await asyncio.sleep(3)
        photo = FSInputFile(f'data/user_photos/{message.from_user.id}_photo.jpg')
        await message.reply_photo(caption='–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫, –≤–µ—Ä–Ω–æ?',
                                  photo=photo,
                                  reply_markup=true_or_edit_keyboard.keyboard())

        # from bot import bot
        #
        # user_profile_photo: UserProfilePhotos = await bot.get_user_profile_photos(message.from_user.id)
        # file = await bot.get_file(user_profile_photo.photos[0][-1].file_id)
        # await bot.download_file(file.file_path, f'data/user_photos/{message.from_user.id}_photo.jpg')
    except TypeError:
        await message.answer('–û—Ç–ø—Ä–∞–≤—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–¥–µ–ª–∞–π —Å–µ–ª—Ñ–∏ üì∑')
        await state.set_state(RegisterNewUser.get_user_photo)


@router.message(RegisterNewUser.confirm_user_photo)
async def confirm_user_photo(message: Message, state: FSMContext):
    if message.text == '–í–µ—Ä–Ω–æ ‚úÖ':
        await message.answer('–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ - –æ—Å—Ç–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                             reply_markup=share_phone_number.keyboard())
        await state.set_state(RegisterNewUser.get_user_phone)

        data = await state.get_data()
        await generate_card.generate(
            user_id=str(message.from_user.id),
            user_name=data['user_name'],
            position_and_company_user=data['user_position_and_company'],
            user_login=data['user_login'],
            user_status=data['user_status']
        )

    elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å ‚úçÔ∏è':
        await message.answer('–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤!\n'
                             '–û—Ç–ø—Ä–∞–≤—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–¥–µ–ª–∞–π —Å–µ–ª—Ñ–∏ üì∑', reply_markup=ReplyKeyboardRemove())
        await state.set_state(RegisterNewUser.get_user_photo)
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤')
        await state.set_state(RegisterNewUser.confirm_user_photo)


@router.message(RegisterNewUser.get_user_phone)
async def get_user_phone(message: Message, state: FSMContext):
    if message.contact != None:
        await state.update_data(user_phone=str(message.contact.phone_number))

        data = await state.get_data()

        await db.add_new_user(user_id=int(message.from_user.id),
                              user_name=str(data['user_name']),
                              user_login=str(data['user_login']),
                              position_and_company_user=str(data['user_position_and_company']),
                              photo_path=str(data['photo_path']),
                              user_status=str(data['user_status']),
                              user_phone=str(data['user_phone']))
        await db.bind_user_to_qr(
            qr_code=str(data['qr_code']),
            user_id=message.chat.id
        )
        await state.clear()

        # await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!"
        #                      "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ–∫–∞—á–∏–≤–∞—Ç—å —Å–≤–æ–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –¥–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏ —Å–æ–±–∏—Ä–∞—Ç—å "
        #                      "—Ñ–∏—Ä–º–µ–Ω–Ω—ã–π –º–µ—Ä—á, —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—ã–∏–≥—Ä–∞—Ç—å Apple Watch, —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å "
        #                      "QR-–∫–æ–¥—ã –∏ —Ä–∞—Å—à–∏—Ä—è—Ç—å —Å–≤–æ–π –∫—Ä—É–≥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤!\n"
        #                      "[–ö–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è]"
        #                      , reply_markup=main_working.keyboard())

        card_profile = FSInputFile(f'data/user_profiles/{message.from_user.id}_profile.jpg')

        await message.reply_photo(
            photo=card_profile,
            caption="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!\n\n"
                    "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ–∫–∞—á–∏–≤–∞—Ç—å —Å–≤–æ–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –¥–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏ —Å–æ–±–∏—Ä–∞—Ç—å "
                    "—Ñ–∏—Ä–º–µ–Ω–Ω—ã–π –º–µ—Ä—á, —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—ã–∏–≥—Ä–∞—Ç—å Apple Watch, —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å "
                    "QR-–∫–æ–¥—ã –∏ —Ä–∞—Å—à–∏—Ä—è—Ç—å —Å–≤–æ–π –∫—Ä—É–≥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤!\n",
            reply_markup=main_working.keyboard()
        )

        await message.answer("–¢–≤–æ—è —Ü–µ–ª—å ‚Äì –¥–æ–π—Ç–∏ –¥–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è üí™\n"
                             "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞¬ª\n\n"
                             "–ù–∞—á–Ω–∏ —Å –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è üïπ\n"
                             "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å:\n"
                             "1. –í—Å—Ç—É–ø–∏ –≤ Telegram-–∫–∞–Ω–∞–ª Test IT –∏ –æ—Å—Ç–∞–≤–∞–π—Å—è –≤ –Ω–µ–º (–∫–Ω–æ–ø–∫–∞ –≤ –º–µ–Ω—é ¬´–í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—ã¬ª)\n"
                             "2. –ü–æ–∑–Ω–∞–∫–æ–º—å—Å—è –∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥ –Ω–µ –º–µ–Ω–µ–µ 10 –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤")
    elif message.text == '–ù–µ –¥–µ–ª–∏—Ç—å—Å—è ‚ùå':
        await state.update_data(user_phone=str('–ù–µ –ø–æ–¥–µ–ª–∏–ª—Å—è'))

        data = await state.get_data()

        await db.add_new_user(user_id=int(message.from_user.id),
                              user_name=str(data['user_name']),
                              user_login=str(data['user_login']),
                              position_and_company_user=str(data['user_position_and_company']),
                              photo_path=str(data['photo_path']),
                              user_status=str(data['user_status']),
                              user_phone=str(data['user_phone']))
        await db.bind_user_to_qr(
            qr_code=str(data['qr_code']),
            user_id=message.chat.id
        )
        await state.clear()

        card_profile = FSInputFile(f'data/user_profiles/{message.from_user.id}_profile.jpg')

        await message.reply_photo(
            photo=card_profile,
            caption="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!"
                    "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ–∫–∞—á–∏–≤–∞—Ç—å —Å–≤–æ–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –¥–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏ —Å–æ–±–∏—Ä–∞—Ç—å "
                    "—Ñ–∏—Ä–º–µ–Ω–Ω—ã–π –º–µ—Ä—á, —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—ã–∏–≥—Ä–∞—Ç—å Apple Watch, —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å "
                    "QR-–∫–æ–¥—ã –∏ —Ä–∞—Å—à–∏—Ä—è—Ç—å —Å–≤–æ–π –∫—Ä—É–≥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤!\n",
            reply_markup=main_working.keyboard()
        )

        await message.answer("–¢–≤–æ—è —Ü–µ–ª—å ‚Äì –¥–æ–π—Ç–∏ –¥–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è üí™\n"
                             "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞¬ª\n\n"
                             "–ù–∞—á–Ω–∏ —Å –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è üïπ\n"
                             "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å:\n"
                             "–í—Å—Ç—É–ø–∏ –≤ Telegram-–∫–∞–Ω–∞–ª Test IT –∏ –æ—Å—Ç–∞–≤–∞–π—Å—è –≤ –Ω–µ–º (–∫–Ω–æ–ø–∫–∞ –≤ –º–µ–Ω—é ¬´–í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—ã¬ª)\n"
                             "–ü–æ–∑–Ω–∞–∫–æ–º—å—Å—è –∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥ –Ω–µ –º–µ–Ω–µ–µ 10 –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤")
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –≤—ã–±–∏—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞')
        await state.set_state(RegisterNewUser.get_user_phone)


@router.message(commands=['menu'])
async def go_menu(message: Message, state: FSMContext):
    await state.set_state()
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main_working.keyboard())
